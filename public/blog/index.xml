<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Francis Sunday</title>
    <link>http://localhost:1313/blog/</link>
    <description>Recent content in Blog on Francis Sunday</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Largest product in a series</title>
      <link>http://localhost:1313/blog/2025-02-07-largest-product-in-a-series/</link>
      <pubDate>Fri, 07 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2025-02-07-largest-product-in-a-series/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;First post on this blog after a long hiatus &amp;ndash; hopefully, this will stick. I was cleaning up my browser tabs, and found a Project Euler window open and decided to attempt some problems in Haskell. I&amp;rsquo;ve been writing Haskell for a couple of months now, and it was a great way to test myself.&#xA;I picked one of the problems I attempted, a simple one &amp;ndash; &lt;a href=&#34;https://projecteuler.net/problem=8&#34;&gt;Problem 8: Largest product in a series&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Working with JSON in Go</title>
      <link>http://localhost:1313/blog/2021-05-03-json-in-go/</link>
      <pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2021-05-03-json-in-go/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;Summary: I&amp;rsquo;ve worked with JSON in various programming languages in context to&#xA;data exchange/communication between applications. In this article, I&amp;rsquo;ll give a brief overview of&#xA;the encoding/json package in Go, and point some gotchas I&amp;rsquo;ve&#xA;encountered.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.json.org&#34;&gt;JSON&lt;/a&gt; (JavaScript Object Notation), is a popular data interchange format commonly used for communication between applications.&lt;/p&gt;&#xA;&lt;p&gt;Working with JSON in Go is stress-free thanks to the &lt;a href=&#34;https://golang.org/pkg/encoding/json&#34;&gt;encoding/json&lt;/a&gt; package from the standard library.&lt;/p&gt;&#xA;&lt;h3 id=&#34;encoding-and-decoding-data&#34;&gt;Encoding and decoding data&lt;/h3&gt;&#xA;&lt;p&gt;To encode or decode data we use the &lt;a href=&#34;https://golang.org/pkg/encoding/json/#Marshal&#34;&gt;Marshal&lt;/a&gt; and &lt;a href=&#34;https://golang.org/pkg/encoding/json/#Unmarshal&#34;&gt;Unmarshal&lt;/a&gt; functions from the json package.&#xA;Both methods have the following signatures:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Enum Stringer Interface optimisation in Go</title>
      <link>http://localhost:1313/blog/2021-04-08-enum-stringer-optimization-go/</link>
      <pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2021-04-08-enum-stringer-optimization-go/</guid>
      <description>&lt;p&gt;The most idiomatic way of describing an enum type in Go is to use constants, often in conjunction with &lt;a href=&#34;https://golang.org/ref/spec#Iota&#34;&gt;iota&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;A pattern I&amp;rsquo;ve used to implement the &lt;code&gt;Stringer&lt;/code&gt; interface for an enum type is to&#xA;lookup the string representation in a slice. Consider this snippet from a&#xA;project I&amp;rsquo;m working on:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;// Status ...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;type&lt;/span&gt; Status &lt;span style=&#34;&#34;&gt;uint32&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;// List of possible status values&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;const&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-style:italic&#34;&gt;// The operation is known, but hasn&amp;#39;t been decided yet&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;Processing Status = &lt;span style=&#34;font-weight:bold&#34;&gt;iota&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-style:italic&#34;&gt;// The operation will never be accepted&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;Rejected&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-style:italic&#34;&gt;// The operation was accepted&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;Accepted&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;func&lt;/span&gt; (s Status) String() &lt;span style=&#34;&#34;&gt;string&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; []&lt;span style=&#34;&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;processing&amp;#34;&lt;/span&gt;, &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;rejected&amp;#34;&lt;/span&gt;, &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;accepted&amp;#34;&lt;/span&gt;}[s]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The snippet above works correct but has a few glitches &amp;ndash; passing&#xA;&lt;code&gt;Status(-2)&lt;/code&gt; or &lt;code&gt;Status(300)&lt;/code&gt;  will cause the &lt;code&gt;String()&lt;/code&gt; method to panic, and&#xA;when appending to the slice, the order of the enum constants has to be taken&#xA;into consideration.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Line Numbers In Vim</title>
      <link>http://localhost:1313/blog/2020-02-07-vim-linenumbers/</link>
      <pubDate>Fri, 07 Feb 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2020-02-07-vim-linenumbers/</guid>
      <description>&lt;p&gt;Vim doesn&amp;rsquo;t show line numbers by default, they can be turned on in your vim configuration. Vim has an absolute, relative and hybrid line numbering mode.&#xA;&lt;img src=&#34;https://res.cloudinary.com/hakase-labs/image/upload/v1581043109/bare_setup_mzb8rd.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;absolute-line-numbers&#34;&gt;Absolute Line Numbers&lt;/h2&gt;&#xA;&lt;p&gt;Addding the &lt;code&gt;number&lt;/code&gt; option to your vim config, Vim sets up absolute line numbers to show the line number for each line in the current buffer.&#xA;&lt;img src=&#34;https://res.cloudinary.com/hakase-labs/image/upload/v1581043108/absolute_numbers_q1z6ku.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34; set absolute numbers&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;set&lt;/span&gt; number &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34; or&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;set&lt;/span&gt; nu&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;relative-line-numbers&#34;&gt;Relative Line Numbers&lt;/h2&gt;&#xA;&lt;p&gt;With the &lt;code&gt;relativenumber&lt;/code&gt; option, each line in your file is numbered relative to the cursor’s current position.&#xA;&lt;img src=&#34;https://res.cloudinary.com/hakase-labs/image/upload/v1581043108/relative_numbers_prnvbk.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>What I Use</title>
      <link>http://localhost:1313/blog/2020-01-10-what-i-use/</link>
      <pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2020-01-10-what-i-use/</guid>
      <description>&lt;p&gt;For  the few times I have to tell people in detail the software and hardware I use on a day to day basis to do my job, here’s a post to list them. My setup changes from time to time but I’ll try to keep this up to date.&#xA;My dotfiles can be found  on &lt;a href=&#34;https://github.com/codehakase/dotfiles&#34;&gt;This Repo&lt;/a&gt; - they work for me, read carefully before installing for yourself.&lt;/p&gt;&#xA;&lt;h2 id=&#34;hardware&#34;&gt;Hardware&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;HP 24” Monitor: HP24y IPS Display&lt;/li&gt;&#xA;&lt;li&gt;MacBook Pro 13” (2017)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;2.3 GHz Dual-Core Intel Core i5&lt;/li&gt;&#xA;&lt;li&gt;128GB SSID&lt;/li&gt;&#xA;&lt;li&gt;8GB of 2133 MHz LPDDR3&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Havit Keyboard&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;development&#34;&gt;Development&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Vim&lt;/li&gt;&#xA;&lt;li&gt;Visual Studio Code&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Font: Fira Code&lt;/li&gt;&#xA;&lt;li&gt;Theme: Hyper&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;ITerm2&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Shell: ZSH (Oh My ZSH)&lt;/li&gt;&#xA;&lt;li&gt;Font: Fira Code&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Alacritty  (GPU accelerated terminal)&lt;/li&gt;&#xA;&lt;li&gt;Docker&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Minikube (k8s)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Google Chrome&lt;/li&gt;&#xA;&lt;li&gt;Sequel Pro&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;hosting&#34;&gt;Hosting&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;AWS&lt;/li&gt;&#xA;&lt;li&gt;Digital Ocean&lt;/li&gt;&#xA;&lt;li&gt;Netlify&lt;/li&gt;&#xA;&lt;li&gt;Cloudinary - Media files&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;workflow&#34;&gt;Workflow&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Notion&lt;/li&gt;&#xA;&lt;li&gt;Bear App&lt;/li&gt;&#xA;&lt;li&gt;Slack&lt;/li&gt;&#xA;&lt;li&gt;Spark Mail&lt;/li&gt;&#xA;&lt;li&gt;1Password&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;businessfinance&#34;&gt;Business/Finance&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Fresh Books - Invoicing and accounting&lt;/li&gt;&#xA;&lt;li&gt;Google Sheets&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;entertainment&#34;&gt;Entertainment&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Spotify&lt;/li&gt;&#xA;&lt;li&gt;Amazon Music&lt;/li&gt;&#xA;&lt;li&gt;Sony WH-1000XM3 Headphones (best headphone I’ve used so far)&lt;/li&gt;&#xA;&lt;li&gt;Alexa Echo Dot 3&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Want to recommend a gear or app? Leave a comment!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building Small Containers for Kubernetes</title>
      <link>http://localhost:1313/blog/2018-01-12-building-small-containers-for-kubernetes/</link>
      <pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2018-01-12-building-small-containers-for-kubernetes/</guid>
      <description>&lt;p&gt;The first step to deploying any app to &lt;a href=&#34;https://kubernetes.io&#34;&gt;Kubernetes&lt;/a&gt;, is to bundle the app in a&#xA;container. There are several official, and community-backed container images for&#xA;various languages and distros, and most of these containers can be really large,&#xA;or sometimes contain overheads your app may never need/use.&lt;/p&gt;&#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://docker.io&#34;&gt;Docker&lt;/a&gt;, you can easily create container images in&#xA;a few steps; specify a base image, add your app-specific changes, and build your&#xA;container.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building a Web App With Go, Gin and React</title>
      <link>http://localhost:1313/blog/2018-04-20-building-a-web-app-with-go-gin-and-react/</link>
      <pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2018-04-20-building-a-web-app-with-go-gin-and-react/</guid>
      <description>&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; In this tutorial, I&amp;rsquo;ll show you how easy it is to build a web application with Go and the Gin framework and add authentication to it. Check out the Github &lt;a href=&#34;https://github.com/codehakase/golang-gin&#34;&gt;repo&lt;/a&gt; for the code we&amp;rsquo;re going to write.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;Gin&lt;/strong&gt; is a high-performance micro-framework that delivers a very minimalistic framework that carries with it only the most essential features, libraries, and functionalities needed to build web applications and microservices. It makes it simple to build a request handling pipeline from modular, reusable pieces. It does this by allowing you to write middleware that can be plugged into one or more request handlers or groups of request handlers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The CouchDB Replicator Database - An Overview</title>
      <link>http://localhost:1313/blog/2018-04-19-couchdb-replicator-database/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2018-04-19-couchdb-replicator-database/</guid>
      <description>&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; In this article, I&amp;rsquo;ll give an overview of the replicator database in CouchDB, how to spin off a replication task in CouchDB&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;&lt;strong&gt;CouchDB&lt;/strong&gt; is a database that completely embraces the web. CouchDB stores your data as JSON documents, and allows you access these documents easily, from a web interface or its &lt;a href=&#34;http://docs.couchdb.org/en/2.1.1/api/basics.html#api-basics&#34;&gt;REST API&lt;/a&gt;. We won&amp;rsquo;t be going too deep into couchdb as it would be out of scope for this article - I&amp;rsquo;ll write one of those pretty soon.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Here&#39;s What&#39;s New  In Go 1.10</title>
      <link>http://localhost:1313/blog/2018-03-05-whats-new-in-golang-1-dot-10/</link>
      <pubDate>Tue, 06 Mar 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2018-03-05-whats-new-in-golang-1-dot-10/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;Go 1.8 is one year old (Happy belated Birthday 🎊 🎉)&#xA;Go 1.9 is already 6 months old!&#xA;Go 1.10 is out ✌&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;The latest Go release, &lt;strong&gt;v1.10&lt;/strong&gt; arrived six months after V1.9. This release was stated in the change-logs and the Go blog. I&amp;rsquo;m gonna share some interesting changes I&amp;rsquo;ve found in Go 1.10 with you.&lt;/p&gt;&#xA;&lt;h2 id=&#34;new-features&#34;&gt;New Features&lt;/h2&gt;&#xA;&lt;h3 id=&#34;the-language&#34;&gt;The Language&lt;/h3&gt;&#xA;&lt;p&gt;Go 1.10 offers compiler tool chain and performance improvements, but no significant changes was made to the language&amp;rsquo;s specification.&lt;/p&gt;</description>
    </item>
    <item>
      <title>React Native vs Ionic - A Quick Comparison</title>
      <link>http://localhost:1313/blog/2017-12-05-react-native-vs-ionic/</link>
      <pubDate>Tue, 05 Dec 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2017-12-05-react-native-vs-ionic/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://cdn.scotch.io/23499/HDDv8v7TRhqt4ao1nwfH_React_Native_vs_Ionic_m5b5ol.png.jpg&#34; alt=&#34;&amp;ldquo;React Native vs Ionic&amp;rdquo;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;The main purpose of this article, is to highlight the important differences between Ionic and React Native. Developers utilize a variety of tools. There&amp;rsquo;s always an unending discussion and argument on which platform is best, as every developer has her own personal preferences. Hopefully this article would give you the information you&amp;rsquo;ll need to make a decision on which you&amp;rsquo;d want to settle for in your next mobile app project.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting Started with Go - Variables</title>
      <link>http://localhost:1313/blog/2017-11-19-golang-tutorial-series-pt-2/</link>
      <pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2017-11-19-golang-tutorial-series-pt-2/</guid>
      <description>&lt;p&gt;In the previous article - &lt;a href=&#34;https://dev.to/codehakase/golang---getting-started-16c&#34;&gt;Golang - Getting Started&lt;/a&gt; on &lt;a href=&#34;https://dev.to&#34;&gt;The Practical Dev&lt;/a&gt;, I wrote an intro to the Go programing language, and how to setup a development environment for your platform.&lt;/p&gt;&#xA;&lt;p&gt;In this part of the series, we&amp;rsquo;re going to talk about variables in Go, check it out &lt;a href=&#34;https://dev.to/codehakase/getting-started-with-go---variables-aef&#34;&gt;HERE&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang - Getting Started, The Practical Dev</title>
      <link>http://localhost:1313/blog/2017-11-18-golang-tutorial-series-pt-1/</link>
      <pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2017-11-18-golang-tutorial-series-pt-1/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;“Go will be the server language of the future.” — Tobias Lütke, Shopify&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Go was first created as an experiment, the goal of its creators was to come up with a language that would resolve bad practices of others while keeping the good things.&lt;/p&gt;&#xA;&lt;p&gt;Its first release was on March 2012. Go was designed to feel familiar and to stay as simple as possible, the entire language specification fits in just a few pages.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Terminal for Beginners!</title>
      <link>http://localhost:1313/blog/2017-10-28-terminal-for-beginers/</link>
      <pubDate>Sat, 28 Oct 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2017-10-28-terminal-for-beginers/</guid>
      <description>&lt;p&gt;Getting into Software Development seem overwhelming (actually it is) these days. One has to go through the hassle of getting familiar with different languages, to organizing codebases, to libraries, frameworks, the list goes on. Every Job description (at least the sane ones), requires additional skills to get the job. Example of such, Version Control (Git or Mecurial), tasks runners, build tools, package managers, etc.&lt;/p&gt;&#xA;&lt;p&gt;Most of these extra tools are being accessed/used from a command line interface. The black hacker environment thingy stuff seem frightening kind of, but this article should get you familiar with the terminal interface. For those of us already familiar, after reading this article, you&amp;rsquo;d wished you&amp;rsquo;ve read it before you opened a terminal for the first time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How I Learned Golang</title>
      <link>http://localhost:1313/blog/2017-09-02-how-i-got-started-with-golang/</link>
      <pubDate>Sat, 02 Sep 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2017-09-02-how-i-got-started-with-golang/</guid>
      <description>&lt;p&gt;Go is a relatively new programming language, and nothing makes a developer go crazier than a new programming language, haha! As many new tech inventions, Go was created as an experiment. The goal of its creators was to come up with a language that would resolve bad practices of others while keeping the good things. It was first released in March 2012. Since then Go has attracted many developers from all fields and disciplines.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JavaScript Async/Await 101</title>
      <link>http://localhost:1313/blog/2017-08-02-show-me-async-await-like-am-5/</link>
      <pubDate>Sat, 12 Aug 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2017-08-02-show-me-async-await-like-am-5/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/aysnc-await.png&#34; alt=&#34;async/await&#34; title=&#34;Async/await&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Async and Await has been a blessing to most JavaScript Developers. Even while it was on the &lt;a href=&#34;https://github.com/tc39/ecma262/tree/82bebe057c9fca355cfbfeb36be8e42f18c61e94&#34;&gt;Stage 4 proposal&lt;/a&gt; for ES6, the feature has been warmtly welcomed.&lt;/p&gt;&#xA;&lt;p&gt;Node.js now Supports async/await since its version 7.6.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-asyncawait&#34;&gt;What is async/await?&lt;/h2&gt;&#xA;&lt;p&gt;If this is your first time seeing/hearing of this term, here&amp;rsquo;s it in plain English:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Its the newest way/pattern of writing asychronous code in JavaScript, asides Promises and callbacks.&lt;/li&gt;&#xA;&lt;li&gt;Async/await compared to Promises, are non-blocking&lt;/li&gt;&#xA;&lt;li&gt;Async/await makes aysnchronous code appear and behave like synchronous code.&lt;/li&gt;&#xA;&lt;li&gt;Aysnc/await cannot be used with plain callbacks&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;asyncawait-vs-promises-syntax&#34;&gt;Async/Await Vs Promises (Syntax)&lt;/h4&gt;&#xA;&lt;p&gt;Lets write a function that returns a Promise, which resolves with some data object. When its called, it logs, and return something:&lt;/p&gt;</description>
    </item>
    <item>
      <title>for...in vs for...of Loops in JavaScript</title>
      <link>http://localhost:1313/blog/2017-06-19-for-in-vs-for-of-loop-javascript/</link>
      <pubDate>Mon, 19 Jun 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2017-06-19-for-in-vs-for-of-loop-javascript/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/9336187/27305938-97169192-553b-11e7-99cb-99396a9593fd.png&#34; alt=&#34;for-in-graphics&#34; title=&#34;Hakase Labs&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;The &lt;code&gt;for..in&lt;/code&gt; and &lt;code&gt;for..of&lt;/code&gt; loops, gives us a clean and concise syntax to iterate on iterable items like arrays, strings, objects, and enumerables. Now the question is where to use which.&#xA;Here&amp;rsquo;s a little reminder to get you you started.&lt;/p&gt;&#xA;&lt;h2 id=&#34;forin&#34;&gt;for..in&lt;/h2&gt;&#xA;&lt;p&gt;Use this to iterate over the properties of an object:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;let&lt;/span&gt; person = {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;Francis&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alias: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;codehakase&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    eyeColour: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;brown&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;font-weight:bold&#34;&gt;let&lt;/span&gt; key &lt;span style=&#34;font-weight:bold&#34;&gt;in&lt;/span&gt; person) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console.log( &lt;span style=&#34;font-style:italic&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;${&lt;/span&gt;key&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt; =&amp;gt; &lt;/span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;${&lt;/span&gt;person[key]&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;`&lt;/span&gt; );&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;// name =&amp;gt; Francis&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;// alias =&amp;gt; codehakase&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;for..in&lt;/code&gt; loop can also be used to iterate over indexed values of a string:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Build your first RESTful API with Node.js</title>
      <link>http://localhost:1313/blog/2017-06-13-building-a-restful-api-nodejs/</link>
      <pubDate>Tue, 13 Jun 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2017-06-13-building-a-restful-api-nodejs/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://softwareengineeringdaily.com/wp-content/uploads/2015/08/nodejs_logo_green.jpg&#34; alt=&#34;Node.js&#34; title=&#34;Node.js&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Node.js&lt;/strong&gt; is one intimidating JavaScript framework, especially for beginners. This article serves as a quick quide to Node.js, Express.js and MongoDB. We&amp;rsquo;ll building a simple REST API that&amp;rsquo;ll serve as a basic foundation for an application.&lt;/p&gt;&#xA;&lt;p&gt;For the purpose of this tutorial, you&amp;rsquo;ll be creating the base for a &lt;em&gt;ToDo List&lt;/em&gt; application (yeah its kinda like the convention to start with ToDo list apps). You&amp;rsquo;ll use all CRUD (create, read, update and delete) actions on the API.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Making hakasebot - Twitter Bots 101</title>
      <link>http://localhost:1313/blog/2017-05-30-making-hakasebot-bots-101/</link>
      <pubDate>Tue, 30 May 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2017-05-30-making-hakasebot-bots-101/</guid>
      <description>&lt;p&gt;![Bots]({{ site.url }}/images/twitter-bots.gif &amp;ldquo;Bots&amp;rdquo;)&lt;/p&gt;&#xA;&lt;p&gt;This was my first attempt making twitter bots. I made a very simple twitter bot for this blog, check the &lt;a href=&#34;https://github.com/codehakase/hakasebot&#34;&gt;Source&lt;/a&gt; and also follow &lt;a href=&#34;https://twitter.com/_hakasebot&#34;&gt;@_hakasebot&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;setting-up&#34;&gt;Setting Up&lt;/h2&gt;&#xA;&lt;p&gt;The bot was created using the &lt;a href=&#34;https://github.com/ttezel/twit&#34;&gt;Twit&lt;/a&gt; package, which is a Twitter API client for Node.js. Twit needs to connect with my twitter account so first I created a new &lt;a href=&#34;https://apps.twitter.com/&#34;&gt;Twitter Application&lt;/a&gt;. After that, I took note of my application&amp;rsquo;s keys:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Consumer Key&lt;/li&gt;&#xA;&lt;li&gt;Consumer Secret&lt;/li&gt;&#xA;&lt;li&gt;Access Token&lt;/li&gt;&#xA;&lt;li&gt;Access Token Secret&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;You can find these keys on the &lt;strong&gt;Keys and Access Tokens&lt;/strong&gt; panel in you app&amp;rsquo;s dashboard.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JavaScript Objects 101</title>
      <link>http://localhost:1313/blog/2017-05-25-javascript-objects-101/</link>
      <pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2017-05-25-javascript-objects-101/</guid>
      <description>&lt;p&gt;In JavaScript, most things are objects, from core JavaScript features like strings and arrays to the browser APIs built on top of JavaScript. You can even create your own objects to encapsulate related functions and variables into efficient packages, and act as handy data containers.&lt;/p&gt;&#xA;&lt;h3 id=&#34;what-is-an-object&#34;&gt;What Is An Object?&lt;/h3&gt;&#xA;&lt;p&gt;In JavaScript terms, An Object is a collection of data, which consits of several variables and functions - which are called properties and methods.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to JavaScript Promises</title>
      <link>http://localhost:1313/blog/2017-05-21-intro-to-javascript-promises/</link>
      <pubDate>Sun, 21 May 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2017-05-21-intro-to-javascript-promises/</guid>
      <description>&lt;p&gt;JavaScript promises have become a popular way to handle the tangled mess that JavaScript’s asynchronous nature often creates for us.&#xA;Synchronous code is eaiser to follow and debug, async is better for flexibiity. Promises are becomming a big part of the JavaScript world, with awesome APIs implemented with it.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-a-promise&#34;&gt;What is a Promise?&lt;/h2&gt;&#xA;&lt;p&gt;A Promise is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action&amp;rsquo;s eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a promise to supply the value at some point in the future. - &lt;strong&gt;Mozilla Developer Network (MDN)&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Object-Oriented PHP - An Easy Approach</title>
      <link>http://localhost:1313/blog/2017-05-17-object-oriented-programming-in-php-the-easy-way/</link>
      <pubDate>Wed, 17 May 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2017-05-17-object-oriented-programming-in-php-the-easy-way/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;%7B%7Bsite.url%7D%7D/images/oop-in-php.png&#34; alt=&#34;OOP-PHP&#34; title=&#34;Object-Oriented Programming in PHP&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;For some PHP developers, the concept of object-orient programming, seems like a frightening concept. You might have browsed through repos on GitHub or read articles on how to implement a feature in a particular PHP project of yours, and the code is full of complicated syntax. I tell you, the concept of OOP is easy to grasp.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Object-Oriented programming&lt;/strong&gt; (OOP), is a style of programming which allows us developers and programmers group related tasks or actions into classes to produce effective code. OOP follows the tenet &lt;em&gt;&amp;ldquo;don&amp;rsquo;t repeat yourself (DRY)&lt;/em&gt;, which are common in procedural programming.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introducing Adonis Js</title>
      <link>http://localhost:1313/blog/2017-05-09-introducing-adonis-js/</link>
      <pubDate>Tue, 09 May 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2017-05-09-introducing-adonis-js/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;&#xA;&lt;p&gt;AdonisJs is a true MVC Framework for Node.js. It encapsulate all the boring parts of Web programming and offers you a nice &amp;amp; clean API to work with. AdonisJs makes it easy to write web applications with less code. In this article, i will show you how to get started with AdonisJs. Checkout the repo on Github.&lt;/p&gt;&#xA;&lt;p&gt;Node.js is one of the emerging technologies to write real-time applications using one of your favorite web languages: Javascript. With the ample choices of frameworks to write your first web server, not even a single one offers the desired developer experience. This is where AdonisJs shines.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Posts Archive</title>
      <link>http://localhost:1313/blog/archive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/archive/</guid>
      <description>This page contains an archive of all posts.</description>
    </item>
  </channel>
</rss>
