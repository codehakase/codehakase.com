<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Francis Sunday</title>
    <link>https://codehakase.com/tags/javascript/</link>
    <description>Recent content in Javascript on Francis Sunday</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 Aug 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://codehakase.com/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaScript Async/Await 101</title>
      <link>https://codehakase.com/blog/2017-08-02-show-me-async-await-like-am-5/</link>
      <pubDate>Sat, 12 Aug 2017 00:00:00 +0000</pubDate>
      <guid>https://codehakase.com/blog/2017-08-02-show-me-async-await-like-am-5/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://codehakase.com/images/aysnc-await.png&#34; alt=&#34;async/await&#34; title=&#34;Async/await&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Async and Await has been a blessing to most JavaScript Developers. Even while it was on the &lt;a href=&#34;https://github.com/tc39/ecma262/tree/82bebe057c9fca355cfbfeb36be8e42f18c61e94&#34;&gt;Stage 4 proposal&lt;/a&gt; for ES6, the feature has been warmtly welcomed.&lt;/p&gt;&#xA;&lt;p&gt;Node.js now Supports async/await since its version 7.6.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-asyncawait&#34;&gt;What is async/await?&lt;/h2&gt;&#xA;&lt;p&gt;If this is your first time seeing/hearing of this term, here&amp;rsquo;s it in plain English:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Its the newest way/pattern of writing asychronous code in JavaScript, asides Promises and callbacks.&lt;/li&gt;&#xA;&lt;li&gt;Async/await compared to Promises, are non-blocking&lt;/li&gt;&#xA;&lt;li&gt;Async/await makes aysnchronous code appear and behave like synchronous code.&lt;/li&gt;&#xA;&lt;li&gt;Aysnc/await cannot be used with plain callbacks&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;asyncawait-vs-promises-syntax&#34;&gt;Async/Await Vs Promises (Syntax)&lt;/h4&gt;&#xA;&lt;p&gt;Lets write a function that returns a Promise, which resolves with some data object. When its called, it logs, and return something:&lt;/p&gt;</description>
    </item>
    <item>
      <title>for...in vs for...of Loops in JavaScript</title>
      <link>https://codehakase.com/blog/2017-06-19-for-in-vs-for-of-loop-javascript/</link>
      <pubDate>Mon, 19 Jun 2017 00:00:00 +0000</pubDate>
      <guid>https://codehakase.com/blog/2017-06-19-for-in-vs-for-of-loop-javascript/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/9336187/27305938-97169192-553b-11e7-99cb-99396a9593fd.png&#34; alt=&#34;for-in-graphics&#34; title=&#34;Hakase Labs&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;The &lt;code&gt;for..in&lt;/code&gt; and &lt;code&gt;for..of&lt;/code&gt; loops, gives us a clean and concise syntax to iterate on iterable items like arrays, strings, objects, and enumerables. Now the question is where to use which.&#xA;Here&amp;rsquo;s a little reminder to get you you started.&lt;/p&gt;&#xA;&lt;h2 id=&#34;forin&#34;&gt;for..in&lt;/h2&gt;&#xA;&lt;p&gt;Use this to iterate over the properties of an object:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;let&lt;/span&gt; person = {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;Francis&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alias: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;codehakase&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    eyeColour: &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;brown&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;font-weight:bold&#34;&gt;let&lt;/span&gt; key &lt;span style=&#34;font-weight:bold&#34;&gt;in&lt;/span&gt; person) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console.log( &lt;span style=&#34;font-style:italic&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;${&lt;/span&gt;key&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt; =&amp;gt; &lt;/span&gt;&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;${&lt;/span&gt;person[key]&lt;span style=&#34;font-weight:bold;font-style:italic&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;`&lt;/span&gt; );&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;// name =&amp;gt; Francis&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;// alias =&amp;gt; codehakase&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;&lt;/span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;for..in&lt;/code&gt; loop can also be used to iterate over indexed values of a string:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Making hakasebot - Twitter Bots 101</title>
      <link>https://codehakase.com/blog/2017-05-30-making-hakasebot-bots-101/</link>
      <pubDate>Tue, 30 May 2017 00:00:00 +0000</pubDate>
      <guid>https://codehakase.com/blog/2017-05-30-making-hakasebot-bots-101/</guid>
      <description>&lt;p&gt;![Bots]({{ site.url }}/images/twitter-bots.gif &amp;ldquo;Bots&amp;rdquo;)&lt;/p&gt;&#xA;&lt;p&gt;This was my first attempt making twitter bots. I made a very simple twitter bot for this blog, check the &lt;a href=&#34;https://github.com/codehakase/hakasebot&#34;&gt;Source&lt;/a&gt; and also follow &lt;a href=&#34;https://twitter.com/_hakasebot&#34;&gt;@_hakasebot&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;setting-up&#34;&gt;Setting Up&lt;/h2&gt;&#xA;&lt;p&gt;The bot was created using the &lt;a href=&#34;https://github.com/ttezel/twit&#34;&gt;Twit&lt;/a&gt; package, which is a Twitter API client for Node.js. Twit needs to connect with my twitter account so first I created a new &lt;a href=&#34;https://apps.twitter.com/&#34;&gt;Twitter Application&lt;/a&gt;. After that, I took note of my application&amp;rsquo;s keys:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Consumer Key&lt;/li&gt;&#xA;&lt;li&gt;Consumer Secret&lt;/li&gt;&#xA;&lt;li&gt;Access Token&lt;/li&gt;&#xA;&lt;li&gt;Access Token Secret&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;You can find these keys on the &lt;strong&gt;Keys and Access Tokens&lt;/strong&gt; panel in you app&amp;rsquo;s dashboard.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JavaScript Objects 101</title>
      <link>https://codehakase.com/blog/2017-05-25-javascript-objects-101/</link>
      <pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate>
      <guid>https://codehakase.com/blog/2017-05-25-javascript-objects-101/</guid>
      <description>&lt;p&gt;In JavaScript, most things are objects, from core JavaScript features like strings and arrays to the browser APIs built on top of JavaScript. You can even create your own objects to encapsulate related functions and variables into efficient packages, and act as handy data containers.&lt;/p&gt;&#xA;&lt;h3 id=&#34;what-is-an-object&#34;&gt;What Is An Object?&lt;/h3&gt;&#xA;&lt;p&gt;In JavaScript terms, An Object is a collection of data, which consits of several variables and functions - which are called properties and methods.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to JavaScript Promises</title>
      <link>https://codehakase.com/blog/2017-05-21-intro-to-javascript-promises/</link>
      <pubDate>Sun, 21 May 2017 00:00:00 +0000</pubDate>
      <guid>https://codehakase.com/blog/2017-05-21-intro-to-javascript-promises/</guid>
      <description>&lt;p&gt;JavaScript promises have become a popular way to handle the tangled mess that JavaScriptâ€™s asynchronous nature often creates for us.&#xA;Synchronous code is eaiser to follow and debug, async is better for flexibiity. Promises are becomming a big part of the JavaScript world, with awesome APIs implemented with it.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-a-promise&#34;&gt;What is a Promise?&lt;/h2&gt;&#xA;&lt;p&gt;A Promise is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action&amp;rsquo;s eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a promise to supply the value at some point in the future. - &lt;strong&gt;Mozilla Developer Network (MDN)&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introducing Adonis Js</title>
      <link>https://codehakase.com/blog/2017-05-09-introducing-adonis-js/</link>
      <pubDate>Tue, 09 May 2017 00:00:00 +0000</pubDate>
      <guid>https://codehakase.com/blog/2017-05-09-introducing-adonis-js/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;&#xA;&lt;p&gt;AdonisJs is a true MVC Framework for Node.js. It encapsulate all the boring parts of Web programming and offers you a nice &amp;amp; clean API to work with. AdonisJs makes it easy to write web applications with less code. In this article, i will show you how to get started with AdonisJs. Checkout the repo on Github.&lt;/p&gt;&#xA;&lt;p&gt;Node.js is one of the emerging technologies to write real-time applications using one of your favorite web languages: Javascript. With the ample choices of frameworks to write your first web server, not even a single one offers the desired developer experience. This is where AdonisJs shines.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
