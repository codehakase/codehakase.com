<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Json on Francis Sunday</title>
    <link>https://codehakase.com/tags/json/</link>
    <description>Recent content in Json on Francis Sunday</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 May 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://codehakase.com/tags/json/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Working with JSON in Go</title>
      <link>https://codehakase.com/blog/2021-05-03-json-in-go/</link>
      <pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate>
      <guid>https://codehakase.com/blog/2021-05-03-json-in-go/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;Summary: I&amp;rsquo;ve worked with JSON in various programming languages in context to&#xA;data exchange/communication between applications. In this article, I&amp;rsquo;ll give a brief overview of&#xA;the encoding/json package in Go, and point some gotchas I&amp;rsquo;ve&#xA;encountered.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.json.org&#34;&gt;JSON&lt;/a&gt; (JavaScript Object Notation), is a popular data interchange format commonly used for communication between applications.&lt;/p&gt;&#xA;&lt;p&gt;Working with JSON in Go is stress-free thanks to the &lt;a href=&#34;https://golang.org/pkg/encoding/json&#34;&gt;encoding/json&lt;/a&gt; package from the standard library.&lt;/p&gt;&#xA;&lt;h2 id=&#34;encoding-and-decoding-data&#34;&gt;Encoding and decoding data&lt;/h2&gt;&#xA;&lt;p&gt;To encode or decode data we use the &lt;a href=&#34;https://golang.org/pkg/encoding/json/#Marshal&#34;&gt;Marshal&lt;/a&gt; and &lt;a href=&#34;https://golang.org/pkg/encoding/json/#Unmarshal&#34;&gt;Unmarshal&lt;/a&gt; functions from the json package.&#xA;Both methods have the following signatures:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
